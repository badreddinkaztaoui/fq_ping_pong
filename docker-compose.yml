services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth:
    container_name: auth
    build:
      context: ./backend/auth
      dockerfile: Dockerfile
    volumes:
      - ./backend/auth:/app
    env_file:
      - .env
      - ./backend/auth/.env
    environment:
      - DB_NAME=${AUTH_DB_NAME}
      - DB_USER=${AUTH_DB_USER}
      - DB_PASSWORD=${AUTH_DB_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        python manage.py collectstatic --noinput &&
        python manage.py makemigrations &&
        python manage.py migrate &&
        daphne -b 0.0.0.0 -p 8001 auth.asgi:application"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # game:
  #   container_name: game
  #   build:
  #     context: ./backend/game
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend/game:/app
  #   env_file:
  #     - .env
  #     - ./backend/game/.env
  #   environment:
  #     - DB_NAME=${GAME_DB_NAME}
  #     - DB_USER=${GAME_DB_USER}
  #     - DB_PASSWORD=${GAME_DB_PASSWORD}
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   command: >
  #     sh -c "
  #       python manage.py collectstatic --noinput &&
  #       python manage.py makemigrations &&
  #       python manage.py migrate &&
  #       daphne -b 0.0.0.0 -p 8002 game.asgi:application"  # Note the port change
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8002/health"]  # Updated port
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # chat:
  #   container_name: chat
  #   build:
  #     context: ./backend/chat
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend/chat:/app
  #   env_file:
  #     - .env
  #     - ./backend/chat/.env
  #   environment:
  #     - DB_NAME=${CHAT_DB_NAME}
  #     - DB_USER=${CHAT_DB_USER}
  #     - DB_PASSWORD=${CHAT_DB_PASSWORD}
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   command: >
  #     sh -c "
  #       python manage.py collectstatic --noinput &&
  #       python manage.py makemigrations &&
  #       python manage.py migrate &&
  #       daphne -b 0.0.0.0 -p 8003 chat.asgi:application"  # Note the port change
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8003/health"]  # Updated port
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  postgres:
    container_name: postgres
    image: postgres:17.2-alpine3.19
    env_file:
      - .env
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256

  redis:
    container_name: redis
    image: redis:7.2-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "8000:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      frontend:
        condition: service_healthy
      auth:
        condition: service_healthy
      # game:
      #   condition: service_healthy
      # chat:
      #   condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres:
    driver: local
  redis:
    driver: local

networks:
  app-network:
    name: app-network
    driver: bridge
