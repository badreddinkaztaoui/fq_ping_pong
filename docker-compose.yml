services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - HOST=0.0.0.0
      - PORT=3000
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  auth:
    container_name: auth
    hostname: auth
    build:
      context: ./backend/auth
      dockerfile: Dockerfile
    volumes:
      - ./backend/auth:/app
      - /app/media/avatars
    env_file:
      - .env
      - ./backend/auth/.env
    environment:
      - DB_USER=${AUTH_DB_USER}
      - DB_PASSWORD=${AUTH_DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        python manage.py collectstatic --noinput &&
        python manage.py makemigrations api &&
        python manage.py migrate &&
        uvicorn core.asgi:application --host 0.0.0.0 --port 8001 --reload"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/auth/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  chat:
    container_name: chat
    hostname: chat
    build:
      context: ./backend/chat
      dockerfile: Dockerfile
    volumes:
      - ./backend/chat:/app
    env_file:
      - .env
      - ./backend/chat/.env
    environment:
      - DB_USER=${CHAT_DB_USER}
      - DB_PASSWORD=${CHAT_DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth:
        condition: service_healthy
    command: >
      sh -c "
        python manage.py collectstatic --noinput &&
        python manage.py makemigrations api &&
        python manage.py migrate &&
        uvicorn core.asgi:application --host 0.0.0.0 --port 8002 --reload"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/api/chat/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    container_name: postgres
    image: postgres:17.2-alpine3.19
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis
    image: redis:7.2-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "8000:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      frontend:
        condition: service_healthy
      auth:
        condition: service_healthy
      chat:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres:
    driver: local
  redis:
    driver: local

networks:
  app-network:
    name: app-network
    driver: bridge
